/*
Un Establecimiento educativo necesita implementar un sistema en el que se puedan cargar alumnos que
cursan una asignatura, los datos que caracterizan a los alumnos son: el nombre y apellido, Libreta
Universitaria, sexo, condici√≥n (regular o condicional) y la nota final.
Los datos para una asignatura son Nombre de la Asignatura, A√±o, Total de Hs,
Implemente las clases y m√©todos necesarios para esta situaci√≥n, teniendo en cuenta lo que se pide a
continuaci√≥n:
1.Mostrar en pantalla todos los alumnos que se encuentren en la asignatura.
2.Mostrar en pantalla los alumnos que se encuentren como condicional y su cantidad.
3.Ordenar los alumnos de acuerdo a su nota (de mayor a menor) y mostrarlo en pantalla.
4.Ordenar los alumnos por nombre y apellido y mostrarlo en pantalla
*/
import java.util.Scanner;

class practicarColecciones{
	public static void main(String[] args){
		Scanner scan = new Scanner(System.in);
		// Menu
		System.out.println("####  Establecimiento Educativo  ####");
		System.out.println(" 1. Mostrar alumnos de una asignatura");
		System.out.println(" 2. Mostrar alumnos en estado condicional");
		System.out.println(" 3. Ordenar alumnos (nota mayor a menor)");
		System.out.println(" 4. Ordenar alumnos (nombre/apellido)");
		System.out.println(" q. Salir");
		String eleccion = scan.nextLine();
		switch(eleccion){
			case "1":
				alumnosAsignatura();
				break;
			case "2";
				alumnosEstadoCondicional();
				break;
			case "3":
				ordenarNotaMaxMin();
				break;
			case "4";
				ordenarNombreApellido();
				break;
			case "q":
				System.out.println("Saliendo del programa.");
				break;
			default:
				System.out.println("Error: El valor ingresado es invalido.");

		}
	}
}

/*
üß© ¬øQu√© es una interfaz en Java?

Una interfaz en Java es un tipo de contrato que define qu√© debe hacer una clase, pero no c√≥mo lo hace.

public interface Vehiculo {
    void mover();
}


Esto significa que cualquier clase que implemente esa interfaz debe definir el comportamiento del m√©todo mover().

üèóÔ∏è ¬øQu√© es una implementaci√≥n?

Una implementaci√≥n es una clase que proporciona el c√≥digo real para los m√©todos definidos en una interfaz.

public class Auto implements Vehiculo {
    @Override
    public void mover() {
        System.out.println("El auto se mueve.");
    }
}

‚úÖ Apliquemos esto a las colecciones

En Java, las colecciones est√°n dise√±adas usando interfaces para permitir flexibilidad y escalabilidad. Luego, se utilizan clases concretas que implementan esas interfaces.

üî∑ Principales interfaces del framework de colecciones
Interfaz		¬øQu√© representa?							M√©todos clave
Collection<E>	Ra√≠z de todas las colecciones				add(), remove(), size()
List<E>			Lista ordenada, puede tener duplicados		get(), add(index, elem), remove()
Set<E>			Conjunto sin duplicados						add(), contains()
Map<K, V>		Pares clave-valor							put(), get(), remove()
Queue<E>		Cola FIFO									offer(), poll(), peek()
üî∂ Implementaciones comunes
Interfaz			Clase de implementaci√≥n	Caracter√≠sticas
List	ArrayList	Lista din√°mica, acceso r√°pido por √≠ndice
List	LinkedList	Inserci√≥n/eliminaci√≥n eficiente
Set	HashSet	Sin duplicados, sin orden
Set	TreeSet	Sin duplicados, ordenado
Map	HashMap	Claves √∫nicas, sin orden
Map	TreeMap	Claves ordenadas
Queue	LinkedList	Comportamiento de cola
Queue	PriorityQueue	Orden basado en prioridad
üß† ¬øPor qu√© usar interfaces en lugar de clases concretas?

Esto es clave:

// BUENA PR√ÅCTICA
List<String> nombres = new ArrayList<>();


En lugar de:

// NO RECOMENDADO
ArrayList<String> nombres = new ArrayList<>();

‚úÖ Ventajas:

Flexibilidad: pod√©s cambiar la implementaci√≥n f√°cilmente sin cambiar el resto del c√≥digo.

Abstracci√≥n: trabaj√°s con "lo que hace", no "c√≥mo lo hace".

Mantenimiento m√°s f√°cil: se desacopla el c√≥digo.

Reutilizaci√≥n: pod√©s pasar listas, sets, etc. como argumentos a m√©todos sin importar la implementaci√≥n espec√≠fica.

üß™ Ejemplo pr√°ctico:
public class Main {
    public static void main(String[] args) {
        // Cambi√° solo esta l√≠nea si quer√©s usar otra implementaci√≥n
        List<String> frutas = new ArrayList<>();
        frutas.add("Manzana");
        frutas.add("Banana");

        imprimir(frutas);
    }

    // Este m√©todo acepta cualquier tipo de List
    public static void imprimir(List<String> lista) {
        for (String item : lista) {
            System.out.println(item);
        }
    }
}


Puedo reemplazar new ArrayList<>() por new LinkedList<>() sin cambiar nada m√°s.

üìå En resumen
Concepto	Ejemplo	¬øQu√© hace?
Interfaz	List	Define qu√© puede hacer una lista
Implementaci√≥n	ArrayList, LinkedList	Define c√≥mo lo hace internamente
Declarar por interfaz	List<String> lista = new ArrayList<>();	Recomendado por flexibilidad
*/